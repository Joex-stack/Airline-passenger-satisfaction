# -*- coding: utf-8 -*-
"""preprocesssketch.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uWPUPlmgnypJc0hiy0jildE7wzfmlyWt
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
from sklearn.impute import SimpleImputer









df_train=pd.read_csv("train.csv").drop("id",axis=1).drop("Unnamed: 0",axis=1).drop_duplicates()
df_test=pd.read_csv("test.csv").drop("id",axis=1).drop("Unnamed: 0",axis=1).drop_duplicates()
df_train.head()

df_train.info()

df_train.describe(include="object").T

df_train.describe().T

df_train.describe(include="all").T

df_train.columns=df_train.columns.str.lower().str.replace(" ","_")
df_test.columns=df_test.columns.str.lower().str.replace(" ","_")
df_train.columns

df_train.isnull().sum()

df_train.arrival_delay_in_minutes= df_train.arrival_delay_in_minutes.fillna(df_train.departure_delay_in_minutes).fillna(0)
df_train.isnull().sum()

df_test.isnull().sum()

counts = df_train['arrival_delay_in_minutes'].value_counts().sort_index()

plt.figure(figsize=(10,5))
plt.bar(counts.index, counts.values)
plt.yscale('log')
plt.xlabel('Arrival Delay in Minutes')
plt.ylabel('Number of Passengers (log scale)')
plt.title('Distribution of Arrival Delays (Log Scale)')
plt.show()

nums=df_train.select_dtypes(include="number").columns.to_list()
nums

categoical = df_train.select_dtypes(include="object").columns.to_list()
categoical.remove("satisfaction")
categoical

num_imputer = SimpleImputer(strategy='median')
df_train[nums] = num_imputer.fit_transform(df_train[nums])
df_test[nums] = num_imputer.transform(df_test[nums])

df_test.isnull().sum()

df_train.isnull().sum()

df_train['satisfaction'] = df_train['satisfaction'].map({'satisfied': 1, 'neutral or dissatisfied': 0})
df_test['satisfaction'] = df_test['satisfaction'].map({'satisfied': 1, 'neutral or dissatisfied': 0})

satisfaction_counts = df_train['satisfaction'].value_counts()

plt.figure(figsize=(8, 6))
plt.bar(satisfaction_counts.index, satisfaction_counts.values)
plt.xlabel('Satisfaction')
plt.ylabel('Count')
plt.title('Distribution of Satisfaction')
plt.show()

plt.pie(satisfaction_counts, labels=satisfaction_counts.index, autopct='%1.1f%%')
plt.title('Distribution of Satisfaction')
plt.show()#####---------------no imbalance

##  risk and diff ratios
from IPython.display import display

for s in categoical:
    df_sat_g = df_train.groupby(s).satisfaction.agg(['count','mean'])
    df_sat_g['risk'] = np.log(df_sat_g['mean'] / (1 - df_sat_g['mean']))
    df_sat_g['diff_ratio'] = df_sat_g['mean'] - (1 - df_sat_g['mean'])
    display(df_sat_g)

from sklearn.metrics import mutual_info_score

def mutual_info_seires (series):
  return mutual_info_score(series,df_train.satisfaction)

mutual_info = df_train[categoical].apply(mutual_info_seires)
mutual_info.sort_values(ascending=False)
mutual_info


#--- so gender dosent mean shit

corr_data = df_train[nums].corrwith(df_train.satisfaction)

corr_data= corr_data.sort_values(ascending=False)
corr_data

plt.figure(figsize=(8,6))
sns.barplot(x=corr_data.values, y=corr_data.index, palette='coolwarm')
plt.title('Correlation of Numeric Features with Satisfaction', fontsize=14)
plt.xlabel('Correlation Coefficient')
plt.ylabel('Feature')
plt.xlim(-1, 1)
plt.grid(axis='x', linestyle='--', alpha=0.7)
plt.show()

# here gate location means nothing

categoical , nums

imp_cats= categoical.copy()
imp_cats.remove('gender')
imp_cats

imp_nums=nums.copy()
imp_nums.remove('gate_location')
imp_nums.remove('departure_delay_in_minutes')
imp_nums

from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import OneHotEncoder, StandardScaler

def preprocess_encode_scale_impute (categoicalss, numsss):

  num_transformer = Pipeline(steps=[
      ("imputer", SimpleImputer(strategy="median")),
      ("scalar", StandardScaler())
  ])

  cat_transformer= Pipeline(steps=[
      ("imputer" , SimpleImputer(strategy="most_frequent")),
      ("encoder" , OneHotEncoder(handle_unknown='ignore', drop='first'))
  ])

  preprocess= ColumnTransformer(
      transformers=[
          ("nums",num_transformer,numsss),
          ("cat",cat_transformer,categoicalss)
      ],
      remainder='passthrough'
  )

  return preprocess

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import cross_val_score

prepros = preprocess_encode_scale_impute(imp_cats, imp_nums)
model = Pipeline(steps=[
    ('preprocessor', prepros),
    ('classifier', RandomForestClassifier(random_state=42))
])
cv_scores = cross_val_score(
    model,
    df_train[imp_cats + imp_nums],        # features
    df_train['satisfaction'],             # target
    cv=5,
    scoring='accuracy',
    n_jobs=-1
)

print("Cross-validation scores:", cv_scores)
print("Mean CV Accuracy:", np.mean(cv_scores))


model.fit(df_train[imp_cats + imp_nums], df_train['satisfaction'])
y_train_pred = model.predict(df_train[imp_cats + imp_nums])

from sklearn.metrics import classification_report


y_pred = model.predict(df_test[imp_cats + imp_nums])



print(classification_report(y_pred,df_test['satisfaction']))

from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
import matplotlib.pyplot as plt

cm = confusion_matrix(df_test['satisfaction'], y_pred)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=['Not Satisfied', 'Satisfied'])

plt.figure(figsize=(6,6))
disp.plot(cmap='Blues', values_format='d')
plt.title("Confusion Matrix - Test Set")
plt.show()

from sklearn.metrics import precision_recall_curve


y_proba = model.predict_proba(df_test[imp_cats + imp_nums])[:, 1]

prec, rec, _ = precision_recall_curve(df_test['satisfaction'], y_proba)

plt.figure(figsize=(8,6))
plt.plot(rec, prec, label='Precision-Recall Curve')
plt.xlabel("Recall")
plt.ylabel("Precision")
plt.title("Precision-Recall Curve")
plt.legend()
plt.show()